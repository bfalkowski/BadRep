name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        echo "üì¶ Building package..."
        python -m build

    - name: Check package
      run: |
        echo "üîç Checking package..."
        twine check dist/*

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/reviewlab-${{ github.ref_name }}.tar.gz
        asset_name: reviewlab-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Wheel Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/reviewlab-${{ github.ref_name }}-py3-none-any.whl
        asset_name: reviewlab-${{ github.ref_name }}-py3-none-any.whl
        asset_content_type: application/octet-stream

  test-release:
    name: Test Release Package
    runs-on: ubuntu-latest
    needs: release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Download release assets
      uses: actions/download-artifact@v5
      with:
        name: dist
        path: dist/

    - name: Install from wheel
      run: |
        echo "üîß Installing from wheel..."
        pip install dist/*.whl

    - name: Test CLI
      run: |
        echo "üß™ Testing CLI..."
        reviewlab --version
        reviewlab --help

    - name: Test basic functionality
      run: |
        echo "üîç Testing basic functionality..."
        python -c "
        from core.bug_injection import BugInjectionEngine
        from core.evaluation import EvaluationEngine
        print('‚úÖ Core modules imported successfully')
        "
