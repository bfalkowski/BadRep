name: CI - Test & Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test & Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]
        include:
          - python-version: 3.8
            python-version-short: "3.8"
          - python-version: 3.9
            python-version-short: "3.9"
          - python-version: 3.10
            python-version-short: "3.10"
          - python-version: 3.11
            python-version-short: "3.11"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run linting
      run: |
        echo "üîç Running code quality checks..."
        make lint

    - name: Check code formatting
      run: |
        echo "üé® Checking code formatting..."
        make format-check

    - name: Run type checking
      run: |
        echo "üîç Running type checking..."
        make type-check

    - name: Run tests with coverage
      run: |
        echo "üß™ Running tests with coverage..."
        make test-cov

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Run integration tests
      run: |
        echo "üîó Running integration tests..."
        python -m pytest tests/integration/ -v

    - name: Run performance benchmarks
      run: |
        echo "‚ö° Running performance benchmarks..."
        python -m pytest tests/ --benchmark-only --benchmark-skip

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run security checks
      run: |
        echo "üîí Running security checks..."
        pip install safety bandit
        safety check
        bandit -r core/ cli/ -f json -o bandit-report.json || true

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json

  dependency-update:
    name: Dependency Update
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Check for outdated dependencies
      run: |
        echo "üì¶ Checking for outdated dependencies..."
        pip install pip-review
        pip-review --local --output=table

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        echo "üì¶ Building package..."
        python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  quality-report:
    name: Quality Report
    runs-on: ubuntu-latest
    needs: [test, security, dependency-update]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Generate quality report
      run: |
        echo "üìä Generating quality report..."
        make html-report
        
    - name: Upload quality report
      uses: actions/upload-artifact@v3
      with:
        name: quality-report
        path: reports/
