# Go Arithmetic Bug Templates
# These templates define common arithmetic bugs that can be injected into Go code

- id: "go_off_by_one_loop"
  name: "Off-by-One Loop Error"
  description: "Loop that iterates one time too many or too few due to boundary condition error"
  category: "correctness"
  severity: "high"
  difficulty: "easy"
  patterns:
    - "off_by_one"
    - "boundary_error"
  tags:
    - "loop"
    - "boundary"
    - "arithmetic"
  examples:
    - "for i := 0; i <= len(array); i++ { // Should be < not <="
    - "for i := 1; i < len(array); i++ { // Should start at 0"
  detection_hints:
    - "Check loop boundary conditions"
    - "Verify loop start and end indices"
    - "Look for <= vs < comparisons in loops"

- id: "go_wrong_operator"
  name: "Wrong Arithmetic Operator"
  description: "Using incorrect arithmetic operator (e.g., + instead of *, / instead of %)"
  category: "correctness"
  severity: "high"
  difficulty: "easy"
  patterns:
    - "wrong_operator"
    - "arithmetic_error"
  tags:
    - "operator"
    - "arithmetic"
    - "calculation"
  examples:
    - "result := a + b // Should be * for multiplication"
    - "remainder := a / b // Should be % for modulo"
  detection_hints:
    - "Verify arithmetic operations match intended logic"
    - "Check operator precedence"
    - "Look for common operator confusion patterns"

- id: "go_integer_division"
  name: "Integer Division Error"
  description: "Unexpected integer division behavior when expecting float division"
  category: "correctness"
  severity: "medium"
  difficulty: "easy"
  patterns:
    - "integer_division"
    - "type_error"
  tags:
    - "division"
    - "integer"
    - "float"
  examples:
    - "result := a / b // Integer division, should be float64(a) / float64(b)"
    - "quotient := 5 / 2 // Results in 2, not 2.5"
  detection_hints:
    - "Check for integer division when float division is expected"
    - "Look for type conversion needs"
    - "Verify division operand types"

- id: "go_precedence_error"
  name: "Operator Precedence Error"
  description: "Incorrect understanding of operator precedence leading to wrong calculation order"
  category: "correctness"
  severity: "medium"
  difficulty: "medium"
  patterns:
    - "precedence_error"
    - "order_of_operations"
  tags:
    - "precedence"
    - "operator"
    - "arithmetic"
  examples:
    - "result := a + b * c // Should be (a + b) * c"
    - "value := a / b + c // Should be a / (b + c)"
  detection_hints:
    - "Check operator precedence rules"
    - "Verify parentheses placement"
    - "Look for complex expressions without proper grouping"

- id: "go_zero_division"
  name: "Division by Zero"
  description: "Attempting to divide by zero without proper validation"
  category: "correctness"
  severity: "high"
  difficulty: "easy"
  patterns:
    - "zero_division"
    - "boundary_error"
  tags:
    - "division"
    - "zero"
    - "panic"
  examples:
    - "result := a / b // Missing check for b == 0"
    - "quotient := numerator / denominator // No validation"
  detection_hints:
    - "Look for division operations without zero checks"
    - "Check for panic handling"
    - "Verify input validation for divisors"

- id: "go_overflow_error"
  name: "Integer Overflow"
  description: "Arithmetic operation that exceeds the range of the data type"
  category: "correctness"
  severity: "medium"
  difficulty: "medium"
  patterns:
    - "overflow"
    - "range_error"
  tags:
    - "overflow"
    - "integer"
    - "range"
  examples:
    - "result := a * b // May overflow for large values"
    - "factorial := 1; for i := 1; i <= n; i++ { factorial *= i }"
  detection_hints:
    - "Check for operations on large numbers"
    - "Look for factorial or power calculations"
    - "Verify data type ranges"

- id: "go_type_conversion"
  name: "Type Conversion Error"
  description: "Incorrect or unsafe type conversions in arithmetic operations"
  category: "correctness"
  severity: "medium"
  difficulty: "medium"
  patterns:
    - "type_conversion"
    - "unsafe_cast"
  tags:
    - "type"
    - "conversion"
    - "arithmetic"
  examples:
    - "result := int(a / b) // May lose precision"
    - "value := float64(int64(largeNumber)) // May overflow"
  detection_hints:
    - "Check for precision loss in type conversions"
    - "Look for unsafe type casting"
    - "Verify conversion safety"

- id: "go_pointer_arithmetic"
  name: "Pointer Arithmetic Error"
  description: "Incorrect pointer arithmetic operations"
  category: "correctness"
  severity: "high"
  difficulty: "hard"
  patterns:
    - "pointer_arithmetic"
    - "memory_error"
  tags:
    - "pointer"
    - "arithmetic"
    - "memory"
  examples:
    - "ptr := ptr + 1 // Go doesn't support pointer arithmetic"
    - "offset := uintptr(ptr) + size // Unsafe pointer manipulation"
  detection_hints:
    - "Go doesn't support pointer arithmetic"
    - "Look for unsafe.Pointer usage"
    - "Check for uintptr conversions"
