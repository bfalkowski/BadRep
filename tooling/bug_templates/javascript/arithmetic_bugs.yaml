# JavaScript Arithmetic Bug Templates
# These templates define common arithmetic bugs that can be injected into JavaScript code

- id: "js_off_by_one_loop"
  name: "Off-by-One Loop Error"
  description: "Loop that iterates one time too many or too few due to boundary condition error"
  category: "correctness"
  severity: "high"
  difficulty: "easy"
  patterns:
    - "off_by_one"
    - "boundary_error"
  tags:
    - "loop"
    - "boundary"
    - "arithmetic"
  examples:
    - "for (let i = 0; i <= array.length; i++) // Should be < not <="
    - "for (let i = 1; i < array.length; i++) // Should start at 0"
  detection_hints:
    - "Check loop boundary conditions"
    - "Verify loop start and end indices"
    - "Look for <= vs < comparisons in loops"

- id: "js_wrong_operator"
  name: "Wrong Arithmetic Operator"
  description: "Using incorrect arithmetic operator (e.g., + instead of *, / instead of %)"
  category: "correctness"
  severity: "high"
  difficulty: "easy"
  patterns:
    - "wrong_operator"
    - "arithmetic_error"
  tags:
    - "operator"
    - "arithmetic"
    - "calculation"
  examples:
    - "result = a + b; // Should be * for multiplication"
    - "remainder = a / b; // Should be % for modulo"
  detection_hints:
    - "Verify arithmetic operations match intended logic"
    - "Check operator precedence"
    - "Look for common operator confusion patterns"

- id: "js_type_coercion"
  name: "Type Coercion Error"
  description: "Unexpected type coercion during arithmetic operations"
  category: "correctness"
  severity: "medium"
  difficulty: "medium"
  patterns:
    - "type_coercion"
    - "type_mismatch"
  tags:
    - "type"
    - "coercion"
    - "arithmetic"
  examples:
    - "result = '5' + 3; // Results in '53' not 8"
    - "sum = '10' - '5'; // Results in 5 (unexpected)"
  detection_hints:
    - "Check operand types before arithmetic operations"
    - "Look for string concatenation vs addition confusion"
    - "Verify type conversion is intentional"

- id: "js_precedence_error"
  name: "Operator Precedence Error"
  description: "Incorrect understanding of operator precedence leading to wrong calculation order"
  category: "correctness"
  severity: "medium"
  difficulty: "medium"
  patterns:
    - "precedence_error"
    - "order_of_operations"
  tags:
    - "precedence"
    - "operator"
    - "arithmetic"
  examples:
    - "result = a + b * c; // Should be (a + b) * c"
    - "value = a / b + c; // Should be a / (b + c)"
  detection_hints:
    - "Check operator precedence rules"
    - "Verify parentheses placement"
    - "Look for complex expressions without proper grouping"

- id: "js_zero_division"
  name: "Division by Zero"
  description: "Attempting to divide by zero without proper validation"
  category: "correctness"
  severity: "high"
  difficulty: "easy"
  patterns:
    - "zero_division"
    - "boundary_error"
  tags:
    - "division"
    - "zero"
    - "infinity"
  examples:
    - "result = a / b; // Missing check for b === 0"
    - "quotient = numerator / denominator; // No validation"
  detection_hints:
    - "Look for division operations without zero checks"
    - "Check for Infinity or -Infinity results"
    - "Verify input validation for divisors"

- id: "js_nan_handling"
  name: "NaN Handling Error"
  description: "Incorrect handling of NaN values in arithmetic operations"
  category: "correctness"
  severity: "medium"
  difficulty: "medium"
  patterns:
    - "nan_handling"
    - "invalid_arithmetic"
  tags:
    - "nan"
    - "arithmetic"
    - "validation"
  examples:
    - "if (result === NaN) // Should use isNaN(result)"
    - "value = a + b; // Where a or b might be NaN"
  detection_hints:
    - "Use isNaN() to check for NaN values"
    - "Check for invalid arithmetic operations"
    - "Look for NaN propagation in calculations"

- id: "js_float_precision"
  name: "Floating Point Precision Error"
  description: "Incorrect handling of floating point arithmetic leading to precision issues"
  category: "correctness"
  severity: "medium"
  difficulty: "medium"
  patterns:
    - "float_precision"
    - "rounding_error"
  tags:
    - "float"
    - "precision"
    - "arithmetic"
  examples:
    - "if (a === b) // Should use Math.abs(a - b) < epsilon for floats"
    - "result = 0.1 + 0.2; // May not equal 0.3 exactly"
  detection_hints:
    - "Use epsilon comparison for float equality"
    - "Check for floating point arithmetic precision issues"
    - "Look for direct float comparisons"

- id: "js_overflow_error"
  name: "Number Overflow"
  description: "Arithmetic operation that exceeds JavaScript's Number.MAX_SAFE_INTEGER"
  category: "correctness"
  severity: "medium"
  difficulty: "medium"
  patterns:
    - "overflow"
    - "range_error"
  tags:
    - "overflow"
    - "number"
    - "range"
  examples:
    - "result = a * b; // May overflow for large values"
    - "factorial = 1; for (let i = 1; i <= n; i++) factorial *= i;"
  detection_hints:
    - "Check for operations on large numbers"
    - "Look for factorial or power calculations"
    - "Verify Number.MAX_SAFE_INTEGER limits"
